#fly -t tutorial sp -p spring-boot-service -c concourse_ci/pipeline2.yml -l concourse_ci/config.yml
#fly -t tutorial unpause-pipeline -p spring-boot-service

TEAMS_RAPPORT_DEV_ON_SUCCESS: &TEAMS_RAPPORT_DEV_ON_SUCCESS
  put: teams-report
  params:
    text: Exécution des tests terminés avec succès
    title: Exécution des tests terminés avec succès pour consentement-service sur dev
    actionName: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME//pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

TEAMS_RAPPORT_DEV_ON_FAILURE: &TEAMS_RAPPORT_DEV_ON_FAILURE
  put: teams-report
  params:
    text: Exécution des tests terminés avec erreur
    title: Exécution des tests terminés avec erreur pour consentement-service sur dev
    actionName: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME//pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

resource_types:
  - name: kubectl-resource
    type: docker-image
    source:
      repository: jmkarthik/concourse-kubectl-resource
      tag: latest
  - name: teams-report-type
    type: docker-image
    source:
      repository: navicore/teams-notification-resource
      tag: latest
  - name: push-report-type
    type: docker-image
    source:
      repository: navicore/teams-notification-resource
      tag: latest

  - name: cf-zero-downtime-resource
    type: docker-image
    source:
      repository: emaraldsquad/cf-zero-downtime-resource
      tag: latest

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest

  - name: jira-version-type # version utilisé par xray
    type: docker-image
    source:
      repository: docker.cfzcea.dev.desjardins.com/desjardins-digital-concourse-jira-version-resource
      tag: latest

resources:

  - name: spring-boot-service
    type: git
    source:
      uri: https://github.com/azmathasan92/concourse-ci-cd.git
      branch: master

  - name: spring-boot-service-docker-repository
    type: docker-image
    source:
      email: ((docker-hub-email))
      username: ((docker-hub-username))
      password: ((docker-hub-password))
      repository: ((docker-hub-username))/((docker-hub-repo-name))

  - name: kubectl
    type: kubectl-resource
    source:
      api_server_uri: ((server))
      namespace: ((namespace))
      certificate_authority_data: ((cad))
      token: ((token))
  - name: start-timer-dev
    type: time
    icon: clock-outline
    source:
      start: ((start-matin-dev))
      stop: ((stop-matin-dev))
      days: [ Monday, Tuesday, Wednesday, Thursday, Friday ]
      location: America/Montreal

  - name: tasks
    type: git
    icon: airplane
    check_every: 24h
    source:
      uri: ((github-url))/concourse-tasks.git
      tag_filter: 5.1.0
      branch: master
      private_key: ((concourse-tasks-githup-key-public))

  - name: teams-report
    type: teams-report-type
    source:
      url: ((teams-alerte-webhook))
      branch: ((git-branch-dev))
      private_key: ((github-key.gestion-consentement-consentement-service-metier))
      ignore_paths:
        - readme.md

  - name: repo-dev
    type: git
    icon: git
    check_every: 10m
    source:
      uri: ((github-url))/((github-repo-name)).git
      branch: ((git-branch-dev))
      #private_key: ((github-key.gestion-consentement-consentement-service-metier))
      ignore_paths:
        - readme.md

  - name: pcf-dev
    type: cf-zero-downtime-resource
    icon: cloud
    source:
      uri: ((pcf-api))
      username: ((product-name))-ciuser
      password: ((pcf-ciuser-password))
      organization: ((product-name))-org
      space: ((pcf-space-dev))

jobs:
  - name: gradle-build-dev
    serial: true
    public: false
    plan:
      - in_parallel:
          - get: repo-dev
            trigger: true
          - get: tasks
      - task: gradle-build-dev
        file: tasks/gradle-and-test-jdk17.yml
        input_mapping:
          repo: repo-dev
        params:
          COMPONENT_NAME: ((component-name))
          ARTIFACTORY_USER: ((artifactory-user))
          ARTIFACTORY_PASS: ((artifactory-api-key))
      - put: artifactory-rc
        params:
          path: build-out
          build_upload: true
          build_publish: https://git.cfzcea.dev.desjardins.com/projects/((product-name))/((component-name))/browse
          buil_name: ((artifactory-group-id)).((component-name))


  - name: run-newman-dev
    serial: true
    serial_groups: [ deployment ]
    plan:
      - in_parallel:
          - get: start-timer-dev
            trigger: ((postman-automatique-dev))
          - get: repo # utiliser par newman-test.yml
            resource: repo-dev
          - get: tasks # tasks pour runner la collection de postman
          - get: artefactory
      - task: run-postman-collections
        file: repo/ci/local-tasks/publish-report-postman.yml
        params:
          COLLECTIONS_URL: ((postman-collection-dev))
          ENVIRONMENT_URL: ((postman-params-env-dev))
          NEWMAN_ADDITIONAL_URL: ((postman-additional-args))
      - put: artifactory
        params:
          path: reports
    on_success: *TEAMS_RAPPORT_DEV_ON_SUCCESS
    on_failure: *TEAMS_RAPPORT_DEV_ON_FAILURE

  - name: test
    public: true

    plan:
      - get: spring-boot-service
        trigger: true
      - task: mvn-test
        file: "spring-boot-service/concourse_ci/tasks/maven-test.yml"

  - name: package
    public: true
    serial: true
    plan:
      - get: spring-boot-service
        trigger: true
        passed: [ test ]
      - task: mvn-package
        file: "spring-boot-service/concourse_ci/tasks/maven-package.yml"
      - put: spring-boot-service-docker-repository
        params:
          build: spring-boot-service-out

  - name: deploy
    public: true
    serial: true
    plan:
      - get: spring-boot-service
        trigger: false
        passed: [ package ]

      - put: kubectl
        params:
          file: "spring-boot-service/spring-boot-deploy.yaml"

groups:
  - name: develop
    jobs:
      - gradle-build-dev
      - static-analysis-dev
      - dependencies-analysis-dev
      - gating-dev
      - deploy-to-dev

